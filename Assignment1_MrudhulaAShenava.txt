#class initializationclass University:#__init__() function initilization to assign values to object property   def __init__(type, course, standing, year):       type.course = course       type.standing = standing       type.year = yearu1 = University("Engineering", "Sophomore", 2019)print(u1.course)print(u1.standing)print(u1.year)#function declaration with default parameter valueprint("\n")print("Function declaration with default values \n")def dogs(breed = "beagle"):    print("This dog is a " + breed)dogs("German Sheperd")dogs()dogs("husky")print("\n")#list comprehensionprint("List Comprehension")print("------------------")celcius = [37.1, 0, 52, 100, 23.5, 10.1]print("Current List : ", celcius)#adding values to existing list comprehension using .extendcelcius.extend([-10, 3, -1])print("Extended List : ", celcius)ferenheit = [((float(9)/5) * x + 32) for x in celcius]print(celcius)print(ferenheit)print("\n")#start of dictionary comprehentionprint("Dictionary comprehension")print("------------------------")#initializing key listkeys=[1,2,3,4,5,6,7,8]#initializing values listvalues=['Loons', 'Owl', 'Parrot', 'Sparrow', 'Woodpecker', 'Eagle', 'Hummingbird', 'Goose']#creating dictionary comprehension using zip keyworddict_comp = {k:v for (k,v)in zip(keys, values)}rev_dict = {v:k for (k,v) in zip(keys, values)}sorted_dict = sorted((v,k) for (k,v) in zip(keys, values))print("The dictionary comprehensions list is as below \n") print(dict_comp)#reversing the dictionary comprehension by considering values:keysprint("The reverse dictionary comprehensions list is as below ") print(rev_dict)#sorting the existing dictionary comprehension with alphabetical orderprint("The sorted dictionary comprehensions list is as below \n") print(sorted_dict)print("\n")#function declaration#try and except block initializtiondef divide():    try:        #m and n will only take integer type values any other value will throw an exception        m=int(input('m is '))        n=int(input('n is '))        #value stored in ans        ans=m//n        print('Answer is : ', ans)    except:        print('Invalid Iput ! Hence, Division not possible')#class declaration#initializtion of decision statements and looping statementsclass task:    #function for odd or even which takes number    #checks if divisible by 2 if true    #prints even else odd    def odd_or_even(num):        num=int(input('Enter the number: '))        if(num%2==0):            print(num,' is an even number')        else:            print(num,' is an odd number')    #function for positive or negative number    #checks if number is greater than 0    #if true returns positive else negative    def pos_or_neg(num):        num=int(input('Enter the number: '))        if(num>0):            print(num,' is a positive number')        else:            print(num,' is a negative number')    #function to check if number is prime    #takes integer as input     def prime_num(num):        num=int(input('Enter the number: '))        for i in range(2,num):            if(num%i==0):                print(num,' is not a prime number')                break            else:                print(num,' is a prime number')#creating object for taskta=task()#initialization of the main blockdef main():    print("*******************")    print("The main function")    print("*******************")    print("\n")    print("Try and Except")    print("--------------")    #calling the function divide    divide()    print("\n")    print("Decision making statements and looping statements")    print("-------------------------------------------------")    print("\n")    print("****************************************")    print("1. Odd or Even number")    print("2. Positive or Negative")    print("3. To check for Prime number")    print("****************************************")    print("\n")    print("Enter your choice: ")    choice=int(input())    print("\n")    if(choice==1):        print('This  is odd or even function:')        ta.odd_or_even()    elif(choice==2):        print('This is positive or negative function:')        ta.pos_or_neg()    elif(choice==3):        print('This is a prime number function:')        ta.prime_num()    elif(choice!=1 or choice!=2 or choice!=3):        print('Oops! there is no such choice!')    #calling the class object     task()if __name__ == "__main__":    main()